---
/* components/portfolio/PortfolioGrid.astro */
const portfolioItems = [
  {
    id: 1,
    title: "Luxe Med Spa Calgary",
    category: "Healthcare & Beauty",
    description:
      "Complete rebrand and website redesign for Calgary's premier med spa. Achieved 300% increase in online bookings within first month.",
    services: ["Brand Identity", "Web Design", "Local SEO", "Social Media"],
    results: { bookings: "+300%", traffic: "+250%", conversion: "15.2%" },
    image: "/portfolio/luxe-med-spa.jpg",
    featured: true,
    year: "2024",
  },
  {
    id: 2,
    title: "Mountain View Dental",
    category: "Healthcare",
    description:
      "Modern dental practice website with patient portal and online booking system.",
    services: ["Web Development", "Patient Portal", "UX Design"],
    results: { appointments: "+180%", calls: "-60%", satisfaction: "98%" },
    image: "/portfolio/mountain-dental.jpg",
    year: "2024",
  },
  {
    id: 3,
    title: "Alberta Solar Co",
    category: "Energy & Green Tech",
    description:
      "Lead generation website for solar panel installations across Alberta.",
    services: ["Lead Generation", "Local SEO", "Conversion Optimization"],
    results: { leads: "150+", quality: "+85%", cost: "-40%" },
    image: "/portfolio/alberta-solar.jpg",
    year: "2024",
  },
  {
    id: 4,
    title: "Prairie Law Group",
    category: "Legal Services",
    description:
      "Professional law firm rebrand with client portal and case management integration.",
    services: ["Brand Identity", "Professional Web", "Client Portal"],
    results: { consultations: "+200%", authority: "+150%", referrals: "+120%" },
    image: "/portfolio/prairie-law.jpg",
    year: "2023",
  },
  {
    id: 5,
    title: "Urban Fitness Club",
    category: "Health & Fitness",
    description:
      "Modern fitness club with membership management and class booking system.",
    services: ["Web Development", "Booking System", "Member Portal"],
    results: { memberships: "+180%", retention: "+65%", revenue: "+220%" },
    image: "/portfolio/urban-fitness.jpg",
    year: "2024",
  },
  {
    id: 6,
    title: "Calgary Tech Startup",
    category: "Technology",
    description:
      "SaaS product landing page optimized for conversions and investor presentations.",
    services: ["Product Design", "Conversion Optimization", "Brand Strategy"],
    results: { conversion: "15%", funding: "$2M", signups: "+400%" },
    image: "/portfolio/tech-startup.jpg",
    featured: true,
    year: "2024",
  },
];

const categories = [
  "All",
  "Healthcare",
  "Technology",
  "Legal Services",
  "Energy & Green Tech",
  "Health & Fitness",
];

const slugify = (s: string) =>

  s.toLowerCase().replace(/[^a-z0-9]+/g, "-").replace(/(^-|-$)/g, "");
---

<section id="projects" class="py-24 bg-slate-950 relative overflow-hidden">
  <!-- Background Pattern -->
  <div class="absolute inset-0 opacity-5">
    <div
      class="absolute inset-0 bg-[radial-gradient(circle_at_25%_25%,rgba(139,92,246,0.3)_0%,transparent_50%),radial-gradient(circle_at_75%_75%,rgba(236,72,153,0.3)_0%,transparent_50%)]"
    ></div>
  </div>

  <div class="container mx-auto px-6 relative z-10">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <h2 class="text-4xl lg:text-6xl font-black mb-6">
        Featured
        <span
          class="bg-gradient-to-r from-violet-400 to-fuchsia-400 bg-clip-text text-transparent"
          >Projects</span
        >
      </h2>
      <p class="text-xl text-slate-400 max-w-3xl mx-auto">
        Real results for real businesses. Each project represents our commitment
        to excellence and measurable outcomes.
      </p>
    </div>

    <!-- Filter Tabs -->
    <div class="flex flex-wrap justify-center gap-4 mb-16">
      {
        categories.map((category, index) => {
          const isAll = category === "All";
          const filter = isAll ? "all" : slugify(category);
          const base =
            "filter-btn px-6 py-3 rounded-full font-medium transition-all duration-300";
          const active =
            index === 0
              ? " bg-violet-600 text-white"
              : " bg-slate-800/50 text-slate-400 hover:bg-slate-700/50 hover:text-white";
          return (
            <button
              type="button"
              class={base + active}
              data-filter={filter}
              aria-pressed={index === 0 ? "true" : "false"}
            >
              {category}
            </button>
          );
        })
      }
    </div>

    <!-- Projects Grid -->
    <div class="portfolio-grid grid grid-cols-1 lg:grid-cols-12 gap-8">
      {
        portfolioItems.map((item, index) => {
          const isLarge = item.featured;
          const gridClass = isLarge ? "lg:col-span-8" : "lg:col-span-4";
          const heightClass = isLarge ? "min-h-[600px]" : "min-h-[500px]";
          return (
            <div
              class={`portfolio-item ${gridClass} ${heightClass} group relative overflow-hidden rounded-3xl bg-gradient-to-br from-slate-800 to-slate-900 border border-slate-700/50 hover:border-violet-500/30 transition-all duration-700 hover:shadow-2xl hover:shadow-violet-500/10 cursor-pointer opacity-0 animate-fade-in-up`}
              data-category={slugify(item.category)}
              style={`animation-delay: ${index * 0.1}s;`}
            >
              <!-- Background Overlay -->
              <div
                class="absolute inset-0 bg-gradient-to-t from-slate-900/90 via-slate-900/50 to-transparent opacity-80 group-hover:opacity-70 transition-opacity duration-500"
              ></div>

              <!-- Content -->
              <div class="absolute inset-0 p-8 flex flex-col justify-between">
                <!-- Top Content -->
                <div>
                  <div class="flex items-center gap-3 mb-4">
                    <span
                      class="px-3 py-1 text-xs font-medium bg-violet-500/20 text-violet-300 rounded-full border border-violet-500/30"
                      >{item.category}</span
                    >
                    <span
                      class="px-3 py-1 text-xs font-medium bg-slate-700/50 text-slate-400 rounded-full"
                      >{item.year}</span
                    >
                  </div>

                  <h3
                    class="text-2xl lg:text-3xl font-bold mb-4 group-hover:text-violet-300 transition-colors duration-300"
                  >
                    {item.title}
                  </h3>

                  <p class="text-slate-300 text-lg mb-6 leading-relaxed opacity-90">
                    {item.description}
                  </p>

                  <!-- Services Tags -->
                  <div class="flex flex-wrap gap-2 mb-6">
                    {item.services.map((service) => (
                      <span
                        class="px-3 py-1 text-xs bg-slate-700/50 text-slate-300 rounded-full border border-slate-600/50 hover:border-violet-500/50 transition-colors duration-300"
                        >{service}</span
                      >
                    ))}
                  </div>
                </div>

                <!-- Bottom Content -->
                <div>
                  <!-- Results -->
                  <div
                    class="bg-slate-800/60 backdrop-blur-sm rounded-2xl p-6 mb-6 border border-slate-700/50 group-hover:border-violet-500/30 transition-colors duration-300"
                  >
                    <div class="grid grid-cols-3 gap-4 text-center">
                      {Object.entries(item.results).map(([key, value]) => (
                        <div>
                          <div class="text-xl lg:text-2xl font-bold text-violet-400 mb-1">
                            {value}
                          </div>
                          <div class="text-xs text-slate-400 capitalize">
                            {key.replace(/([A-Z])/g, " $1").trim()}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  <!-- View Project Link -->
                  <div class="flex items-center justify-between">
                    <button
                      type="button"
                      class="inline-flex items-center gap-2 text-violet-400 hover:text-white font-medium group-hover:underline transition-all duration-300"
                    >
                      View Case Study
                      <svg
                        class="w-4 h-4 transform group-hover:translate-x-1 transition-transform duration-300"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M17 8l4 4m0 0l-4 4m4-4H3"
                        ></path>
                      </svg>
                    </button>

                    <div class="flex items-center gap-2">
                      <div
                        class="w-8 h-8 bg-gradient-to-br from-violet-500 to-fuchsia-500 rounded-full flex items-center justify-center"
                      >
                        <svg
                          class="w-4 h-4 text-white"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                          ></path>
                        </svg>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
        })
      }
    </div>

    <!-- Load More -->
    <div class="text-center mt-16">
      <button
        type="button"
        class="px-8 py-4 bg-slate-800/50 border border-slate-700/50 text-slate-300 font-semibold rounded-xl hover:border-violet-500/50 hover:bg-slate-800/70 hover:text-white transition-all duration-300"
      >
        Load More Projects
      </button>
    </div>
  </div>
</section>

<style>
  @keyframes fade-in-up {
    0% {
      opacity: 0;
      transform: translateY(30px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in-up {
    animation: fade-in-up 0.8s ease-out forwards;
  }

  .portfolio-item {
    transition: all 0.7s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .portfolio-item:hover {
    transform: translateY(-8px);
  }
</style>

<script is:inline>
  // Mantener el script in situ para que no se ejecute antes del DOM (evita hoisting)
  document.addEventListener("DOMContentLoaded", () => {
    const filterBtns = document.querySelectorAll(".filter-btn");
    const gridItems = document.querySelectorAll(".portfolio-item");

    filterBtns.forEach((btn) => {
      btn.addEventListener("click", () => {
        const filter = btn.dataset.filter;

        // Botón activo
        filterBtns.forEach((b) => {
          b.classList.remove("bg-violet-600", "text-white");
          b.classList.add("bg-slate-800/50", "text-slate-400");
          b.setAttribute("aria-pressed", "false");
        });
        btn.classList.add("bg-violet-600", "text-white");
        btn.classList.remove("bg-slate-800/50", "text-slate-400");
        btn.setAttribute("aria-pressed", "true");

        // Filtrado
        gridItems.forEach((item, index) => {
          const category = item.dataset.category;
          const shouldShow = filter === "all" || category === filter;

          if (shouldShow) {
            item.classList.remove("hidden");
            item.style.display = ""; // reset por si quedó en none
            item.style.opacity = "1";
            item.style.transform = "translateY(0)";
            item.style.transitionDelay = `${index * 50}ms`;
          } else {
            item.style.opacity = "0";
            item.style.transform = "translateY(20px)";
            setTimeout(() => {
              item.classList.add("hidden");
            }, 300);
          }
        });
      });
    });
  });
</script>
